#FUNCTION HEADER
# NAME :  RmLintFunc 
# DESCRIPTION: Function for crmlint - 
#find duplicate files and other space waste efficiently
# PROCESS : rmlint scan 
#NOTES :    needs rmlint installed
function RmLintFunc
{
	clear
	msgFunc green "Running rmlint"
cat <<-EOF
rmlint finds space waste and other broken things on your filesystem.
It then produces a report and a shellscript called rmlint.sh that 
contains readily prepared shell commands to remove duplicates and other 
finds. cylon wrapper  will scan, then optionally show report and then  
optionally execute the rmlint.sh.
EOF
	     #check rmlint is installed
            if ! msgFunc checkpac rmlint
				then
				msgFunc anykey 
				return
			fi
			rmlintPath=$(dialog --title "Rmlint" --output-fd 1 --begin 1 1 --cancel-label "Exit" --title  "Select Directory path you wish to scan:" --dselect / 10 40)
			case $? in
				0)
					clear
				;;
				1)
					clear
					msgFunc yellow "Exit pressed."
					return
				;;
				255)
					clear
					msgFunc yellow "Esc pressed."
					return
				;;
			esac
			#read -r rmlintPath	            
		     cd "$rmlintPath" || exitHandlerFunc dest4
			msgFunc norm " "
			msgFunc norm "\"$rmlintPath\" chosen directory."
			msgFunc line
			#msgFunc norm "Type a directory path you wish to scan:-"
			##new menu
			optionsRM=("All" "badids, bi: Find bad UID, GID or files with both." \
			"badlinks, bl: Find bad symlinks pointing nowhere." \
			"emptydirs, ed: Find empty directories." \
			"emptyfiles, ef: Find empty files." \
			"nonstripped, ns: Find nonstripped binaries."\
			"duplicates, df: Find duplicate files."\
			"duplicatedirs, dd: Find duplicate directories."\
			"Return")

			msgFunc blue "Pick rmlint options for selected directory $rmlintPath"
			select  choiceBack in "${optionsRM[@]}"
			#check that paths exist and change path to dest path
			do
			case "$choiceBack" in
			
			"${optionsRM[0]}")#all
			rmlint -g
			;;
			"${optionsRM[1]}")#badids, bi: Find bad UID, GID or files with both
			rmlint -g --types="+bi"
			;;
			"${optionsRM[2]}")#badlinks, bl: Find bad symlinks pointing nowhere
			rmlint -g --types="+bl"
			;;
			"${optionsRM[3]}")#emptydirs, ed: Find empty directories.
			rmlint -g --types="+ed"
			;;
			"${optionsRM[4]}")#emptyfiles, ef: Find empty files  
			rmlint -g --types="+ef"
			;;
			"${optionsRM[5]}")#nonstripped, ns: Find nonstripped binaries.
			rmlint -g --types="+ns"
			;;
			"${optionsRM[6]}")#duplicates, df: Find duplicate files.
			rmlint -g --types="+df"
			;;
			"${optionsRM[7]}")#duplicatedirs, dd: Find duplicate directories
			rmlint -g --types="+dd"
			;;
			*) #exit
			clear
			return 
			;;
			esac
			break
			done

			msgFunc green "Done!"
			msgFunc line
			msgFunc anykey
			#display the results file option? 
			msgFunc green "Display results file  [Y/n]?"
			read -r choicermlint1
			if [ "$choicermlint1" != "n" ]
			then
				msgFunc green  "rmlint output file"
				more rmlint.json		
				msgFunc line
				msgFunc anykey
			fi
				#run the shell option?
				msgFunc green "Execute rmlint.sh file? press e or any key to quit [e/N]"
				msgFunc red "Warning rmlint.sh will change your system based on results of the previous scan"
			    read -r choicermlint2
					if [ "$choicermlint2" = "e" ]
					then
						msgFunc green  "running rmlint.sh output file"
						./rmlint.sh -d
					else
						msgFunc green "Done!"
						return
					fi
			msgFunc green "Done!"
}
