#!/bin/bash
#module containing function called from cylon package
#Functions:  pacaurFunc notifyFunc

#FUNCTION HEADER
# NAME : pacaurFunc
# DESCRIPTION:use pacaur utility to mange AUR packages
# downloads, updates and searches
# PROCESS :  see options array 
#NOTES : needs pacaur(AUR) installed  gnu-netcat is needed 1 option
function pacaurFunc
{
#check if installed
if ! checkPacFunc pacaur
	then
	msgFunc anykey 
	return
fi
clear
while true; do # loop until exit
	local choicePVar=""
	local pacaurPVar=""
	msgFunc line
	msgFunc green "AUR packages management by pacaur. Number of foreign packages installed = $(pacman -Qm | wc -l)"
	msgFunc line
	msgFunc norm
	msgFunc blue "Pacaur options:-"
	local optionsPArr=("Check Network and check for AUR updates (no download), pacaur -k"\
		"Search for package, pacaur -s" "Display information for package, pacaur -i"\
		"Get updates for installed packages, pacaur -u" "Download, build and install the package, pacaur -y"\
		"Download and build the package, pacaur -m " "Download the package, pacaur -d"\
		"Delete pacaur cache" "Edit pacaur config file" "Update all packages in all repositories, pacaur -Syu"\
		"Make a copy of package lists" \
		"Remove foreign packages explicitly installed menu" "Display Desktop Notification" "Return")
		select choicePVar in "${optionsPArr[@]}"
		do
		case "$choicePVar" in  
			"${optionsPArr[0]}")    #check updates
				msgFunc green  "Check network and then check for updates, pacaur -k"
				#check network connectivity if good get updates numbers from arch
				checkNetFunc "aur.archlinux.org"
				msgFunc norm "Number of updates available for installed AUR packages :..."
				pacaur -k | wc -l
				pacaur -k
				msgFunc anykey
			;;
			"${optionsPArr[1]}") #search
				msgFunc green "Search for package in AUR pacaur -s"
				msgFunc norm "Type a AUR package name:-"
				read -r pacaurPVar
				pacaur -s "$pacaurPVar" || return
				msgFunc anykey
			;;
			"${optionsPArr[2]}") #info
				msgFunc green "Display information for package in AUR pacaur -i"
				msgFunc norm "Type a AUR package name:-"
				read -r pacaurPVar		
				pacaur -i "$pacaurPVar" || return
				msgFunc anykey
			;;

		"${optionsPArr[3]}")  #get updates
			msgFunc green "Update AUR packages.  pacaur -u  "	
			pacaur -u
			msgFunc anykey
			;;
			"${optionsPArr[4]}")  #download build and install from AUR by pacaur
				msgFunc green "Download package. pacaur -y"
				msgFunc norm "Type a AUR package name:-"
				read -r pacaurPVar		
				pacaur -y "$pacaurPVar" || return
				msgFunc anykey
			;;
			"${optionsPArr[5]}") #Clone build files and build target package
				msgFunc green "Clone build files and build target package in AUR. pacaur -m"
				msgFunc norm "Type a AUR package name:-"
				read -r pacaurPVar		
				pacaur -m "$pacaurPVar" || return
				msgFunc anykey
			;;
			"${optionsPArr[6]}") #Clone the target(s) build files
				msgFunc green "Clone the package build files  in AUR. pacaur -d"
				msgFunc norm "Type a AUR package name:-"
				read -r pacaurPVar		
				pacaur -d "$pacaurPVar" || return
				msgFunc anykey
			;;
			"${optionsPArr[7]}")  #delete pacaur cache see man pacaur for details
				#check if custom AURDEST environmental variable defined
				#see man pacaur
				if [ -d "$AURDEST" ] 
					then
						msgFunc red "AURDEST environmental variable set, please do manual delete instead."
					else
						msgFunc green "Deleting the pacaur cache"
						if  [ -d "$XDG_CACHE_HOME/pacaur/" ]
						then
							rm -rvf "$XDG_CACHE_HOME"/pacaur/* 
						else
							rm -rvf "$HOME"/.cache/pacaur/*
						fi
				fi
			;;
			"${optionsPArr[8]}") #edit the config file see man pacaur for details
				msgFunc green "Do you wish to edit the user pacaur config file or system [u/S]?"
				read -r pacaurPVar	
				if [ "$pacaurPVar" = "u" ] 
					then #user file
						if [ -f  "$XDG_CONFIG_HOME/pacaur/config" ] 
						then
							$EDITOR "$XDG_CONFIG_HOME/pacaur/config" 
						else 
							if  [ -f "$HOME/.config/pacaur/config" ] 
							then
							 $EDITOR "$HOME/.config/pacaur/config"   
							 else
							 msgFunc red "User config File does not exist"
							fi
						fi
					else #system file
						if [ -f "$XDG_CONFIG_DIRS/pacaur/config" ]
						then
							sudo $EDITOR "$XDG_CONFIG_DIRS/pacaur/config"
						else 
							if [ -f "/etc/xdg/pacaur/config" ] 
							then
							sudo $EDITOR "/etc/xdg/pacaur/config" 
							else
							msgFunc red "System config File does not exist"
							fi
						fi
				fi
				msgFunc anykey
			;;
			"${optionsPArr[9]}") #update all repos
				msgFunc green "Update all packages in all repositories, pacaur -Syu"
				pacaur -Syu
				msgFunc anykey
				;;
				"${optionsPArr[10]}") #Make copy of package lists
				msgFunc green "Make copy of package lists"
				pkglistFunc
				msgFunc anykey
				;;

				"${optionsPArr[11]}") #Delete foreign packages 
					DelQmFunc
				;;
				"${optionsPArr[12]}") #display desktop notification 
					notifyFunc 
				;;
				*)#exit
				msgFunc green "Done!"	
				clear
				return
				;;
		esac
		break
		done
msgFunc green "Done!"	
done
}

#FUNCTION HEADER
# NAME : notifyFunc
# DESCRIPTION: displays desktop notification of updates 
#NOTES : needs pacaur(AUR) and libnotify installed
function notifyFunc
{
	if ! checkPacFunc pacaur
	then
		msgFunc anykey 
	return
	fi
	
	if ! checkPacFunc libnotify
	then
		msgFunc anykey 
	return
	fi
	
	checkNetFunc "archlinux.org"
	
	if [ "$(checkupdates| wc -l)" != 0 ] || [ "$(pacaur -k | wc -l)" != 0 ]
	then
		msgFunc norm "Displaying desktop notifications"
		msgFunc norm "Cylon : Updates ready :"
		msgFunc norm "Pacman = $(checkupdates| wc -l) : AUR = $(pacaur -k | wc -l) "
		notify-send  "Cylon : Updates ready :" \
		"Pacman = $(checkupdates| wc -l) : AUR = $(pacaur -k | wc -l) " --icon=dialog-information
	else
		msgFunc norm "Nothing to display , System up to date"
	fi
}
