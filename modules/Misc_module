#!/bin/bash
#module containing help, read config file,  check user input, display main menu.
# exit Handler  msgFunc functions called from cylon package

#FUNCTION HEADER
# NAME :            msgFunc
# DESCRIPTION :     utility and general purpose function,
#prints line, text and anykey prompts, makes dir for system output,
#checks network and package install
# INPUTS : $1 process name $2 text input $3 text input    
# OUTPUTS : checkpac returns 1 or 0 
# PROCESS :[1]   line [2]    anykey
# [3]   "green , red ,blue , norm yellow and highlight" ,                 
# [4]   checkpac [5]   checkNet v
#NOTES :   needs gnu-cat installed for checkNet        
function msgFunc
{
	case "$1" in 
	
		line) #print blue horizontal line of =
			printf '\033[36;1m%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
			msgFunc norm
		;;
		anykey) #any key prompt, appends second text input to prompt
		    printf '%s' "${GREEN}" 
			read -n 1 -r -s -p "Press any key to continue $2"
			printf '%s\n' "${NORMAL}"
		;;
		
		#print passed text string
		green) printf '%s\n' "${GREEN}$2${NORMAL}" ;;
		red) printf '%s\n' "${RED}$2${NORMAL}" ;;
		blue) printf '%s\n' "${BLUE}$2${NORMAL}" ;;
		yellow)printf '%s\n' "${YELLOW}$2${NORMAL}" ;;
		highlight)printf '%s\n' "${HL}$2${NORMAL}" ;;
		
		norm) #print normal text colour
			if [ "$2" = "" ]
				then
				#just change colour to norm if no text sent
					printf '%s' "${NORMAL}"
				return
			fi
			printf '%s\n' "${NORMAL}$2" ;;
			
		dir) #makes dirs for output appends passed text to name
			#check if coming from system backup other path
			if [ "$3" != 1 ]
				then 
				cd "$Dest3" || exitHandlerFunc dest3
			fi
			TODAYSDIR=$(date +%H%M-%d%b%y)"$2"
			mkdir "$TODAYSDIR"
			cd "$TODAYSDIR" || exitHandlerFunc dest4
			msgFunc norm "Directory for output made at:-"
			pwd	 ;;
			 
		checkpac) #check if package(passed text 2) installed 
		          #returns 1 or 0  and appends passed text 3
		          #if NOMES passed as $3 goto menu display mode
			x=$(pacman -Qqs "$2")
			if [ -n "$x" ]
			then #installed
				#if text input is NOMES skip install good message
				if [ "$3" = "NOMES" ] 
				then 
					printf '%s' "$2"
				else
					printf '%s\n' "$2 is Installed $3"
				fi
				return 0
			else #not installed
				#if text input is NOMES skip install bad message
				if [ "$3" = "NOMES" ] 
				then
					printf '%s' "$2 n/a"
				else
					printf '%s\n' "${RED}$2 is Not installed${NORMAL} $3"
				fi
				return 1
			fi ;;
			
		checkNet) #checks network with netcat 
					#check netcat is installed
					if ! msgFunc checkpac gnu-netcat  
					then
						if ! msgFunc checkpac openbsd-netcat 
						then
							msgFunc red "Install gnu-netcat or openbsd-netcat for Network check"
							msgFunc anykey 
							exitHandlerFunc exitout
						fi
					fi
					#This uses netcat (nc) in its port scan mode, 
					#a quick poke (-z is zero-I/O mode [used for 
					#scanning]) with a quick timeout 
					#(-w 1 waits at most one second
					#It checks Google on port 80 (HTTP).
					if nc -zw1 "$2" 80; then
						msgFunc norm   "We have connectivity $2"
					else
						exitHandlerFunc netdown "$2"
					fi
		;;
		*) #for debug catch typos etc
			printf '%s\n' "Error bad input to msgFunc"
			 ;;
	esac
}


#FUNCTION HEADER
# NAME :  exitHandlerFunc 
# DESCRIPTION: error handler deal with user 
#exists and path not found errors and internet failure 
# INPUTS:  $2 text of internet site down or filename
# PROCESS : exitout dest 1-6 netdown or file error
function exitHandlerFunc
{
	case "$1" in
			exitout) #non-error exit
				msgFunc yellow "Goodbye $USER!"
				msgFunc anykey "and exit."
				exit 0
			;;
			dest1) msgFunc red "Path not found to destination directory"	
				msgFunc norm "$Destination1" ;;
			dest2) msgFunc red "Path not found to destination directory"
				msgFunc norm "$Destination2" ;;			
			dest3) msgFunc red "Path not found to destination directory"
				msgFunc norm "$Dest3" ;;
			dest4) msgFunc red "Path not found to directory"  ;;
			dest5) msgFunc red "Path not found to destination directory"
				msgFunc norm "$Dest5" ;;
			dest6) msgFunc red "Path not found to destination directory"
				msgFunc norm "$Dest6" ;;
			netdown) msgFunc red "Internet connectivity test to $2 failed" ;;
			fileerror) msgFunc red "File error $2"  ;;
	 esac
	msgFunc yellow "Goodbye $USER!"
	msgFunc anykey "and exit."
	exit 1
}

#FUNCTION HEADER
# NAME : DisplayFunc
# DESCRIPTION : Function to display main menu
function DisplayFunc
{
msgFunc blue "Main Menu:"
	optionsM=(
	"pacman" "$(msgFunc checkpac cower NOMES)" \
	"$(msgFunc checkpac pacaur NOMES)" "System Update" "System Maintenance" \
	"System backup" "System Security" "Network Maintenance" \
	"xterm terminal" "View/Edit config file"\
	  "System information" "Cylon information" "Weather" "Exit"\
	)
	select choiceMain in "${optionsM[@]}"
	do
	case "$choiceMain" in
			"${optionsM[0]}")   #pacman update
				PacmanFunc
			;;
			"${optionsM[1]}") #cower AUR helper
				CowerFunc
			;;
			"${optionsM[2]}") #pacaur AUR helper
				pacaurFunc
			;;
			"${optionsM[3]}") #full system update.
				updateFunc
			;;
			"${optionsM[4]}") #system maintenance
				SystemMaintFunc 
			;;
			"${optionsM[5]}")  #Full system backup
				SystemBackFunc 
			;;
			"${optionsM[6]}")  #System security
				SystemSecFunc "$@"
			;;
			"${optionsM[7]}")  # network utiltes
				networkFunc
			;;
			"${optionsM[8]}")  # open a terminal
				xterm -e "cd $Dest3  && /bin/bash"
				msgFunc anykey
			;;
			"${optionsM[9]}")   #config file edit or view
				readconfigFunc "USERCALL"
			;;
			"${optionsM[10]}") #system info
				HelpFunc "SYS"
			;;
			"${optionsM[11]}")  # cylon info and cat readme file to screen 
				HelpFunc "HELP"
			;;
			"${optionsM[12]}")  # 3 day forecast weather
				WeatherFunc
			;;
			*)  #exit  
				exitHandlerFunc exitout 
			;;
	esac
	break
	done

}

#FUNCTION HEADER
# NAME :            HelpFunc
# DESCRIPTION :     two sections one prints various system information the
# other cylon information and the installed readme file
# INPUTS : $1 process name either HELP or SYS    
# OUTPUTS : n/a
# PROCESS :[1] HELP =cylon info [2] SYS   =system info
function HelpFunc 
{
clear
if ! msgFunc checkpac cower
	then
	msgFunc anykey 
	return
fi
if ! msgFunc checkpac arch-audit 
	then
	msgFunc anykey 
	return
fi
clear
msgFunc line
	if [ "$1" = "HELP" ]
				then
				msgFunc green "Cylon information and readme.md file  display." 
				msgFunc line 
				#Program details print
				cat <<-EOF
				Cylon is an Arch Linux maintenance CLI program written in Bash script.
				This program provides numerous tools to Arch Linux users to carry 
				out updates, maintenance, system checks, backups and more. 
				EOF
				msgFunc norm "Written by G.Lyons, Reports to  <glyons66@hotmail.com>"
				msgFunc norm "AUR package name = cylon, at aur.archlinux.org by glyons."
				msgFunc norm "Version=$(pacman -Qs cylon | head -1 | cut -c 7-20)"
				msgFunc norm "Cylon program location = $(which cylon)"
				msgFunc norm "Cylon modules for functions = /usr/lib/cylon/modules/*"
				msgFunc norm "Folder for Cylon output data = $Dest3"
				msgFunc norm "Location of cylonCfg.conf = $Dest5"
				msgFunc norm "Location of readme.md changlog.md = $Dest6"
				msgFunc norm "Location of License.md = /usr/share/licenses/cylon"
				msgFunc norm "Man page, Desktop entry and icon also installed"
				msgFunc anykey "and check which dependencies are installed"
				clear
				msgFunc norm " "
				msgFunc green "Dependencies"
				#dialog   needed to generate GUI menus
				msgFunc checkpac dialog  "NOTE: non-optional"
				#cower   needed to generate GUI menus
				msgFunc checkpac expac  "NOTE: non-optional"
				#cower  (optional) – AUR package for AUR work
				msgFunc checkpac cower "NOTE: AUR package"
				#gdrive  (optional) – AUR package for google drive backup
				msgFunc checkpac gdrive "NOTE: AUR package"
				#lostfiles (optional) – AUR package for finding lost files
				msgFunc checkpac lostfiles "NOTE: AUR package"
				#pacaur (optional – AUR package for AUR work
				msgFunc checkpac pacaur  "NOTE: AUR package"
				#arch-audit(optional) - Arch CVE Monitoring Team data
				msgFunc checkpac arch-audit 
				#rmlint (optional) – Finds lint and other unwanted
				msgFunc checkpac rmlint
				#rkhunter (optional) – finds root kits malware
				msgFunc checkpac rkhunter
				#gnu-netcat (optional) – used for checking network
				msgFunc checkpac gnu-netcat "NOTE: No need if using openbsd-netcat"
				#openbsd-netcat(optional) – used for checking network
				msgFunc checkpac openbsd-netcat "NOTE: No need if using gnu-netcat"
				#clamav  (optional) – used for finding malware
				msgFunc checkpac clamav
				#bleachbit  (optional) – used for system clean
				msgFunc checkpac bleachbit 
				#ccrypt (optional) – Encrypt and decrypt files
				msgFunc checkpac ccrypt
				#rsync (optional) – backup utility
				msgFunc checkpac rsync
				#lynis (optional) – system auditor
				msgFunc checkpac lynis
				#inxi (optional) – CLI system information script 
				msgFunc checkpac inxi
				#htop (optional) – Command line system information script 
				msgFunc checkpac htop
				#wavemon (optional) – wireless network monitor 
				msgFunc checkpac wavemon
				#speedtest-cli (optional) – testing internet bandwidth
				msgFunc checkpac speedtest-cli
				
					msgFunc green "Do you want to view readme? [Y/n]"
					read -r choiceRM1
							if [ "$choiceRM1" != "n" ]
								then
									msgFunc line
									msgFunc green "Displaying cylonReadme.md file at $Dest6"
									cd "$Dest6"  || exitHandlerFunc dest6
									more Readme.md 
									msgFunc green "Done!" 
									msgFunc line
									msgFunc anykey
							fi
				clear
				return
			fi
msgFunc green "System Information display"
msgFunc line
msgFunc norm  #set colour back
msgFunc norm "Uptime = $(uptime -p)"
msgFunc norm "Operating System + Kernal = $(uname -mosr)"
msgFunc norm "Network node name = $(uname -n)"
msgFunc norm "Screen Resolution = $(xrandr |grep "\*" | cut -c 1-15)"
msgFunc norm "CPU $(grep name /proc/cpuinfo  | tail -1)"
mem=($(awk -F ':| kB' '/MemTotal|MemAvail/ {printf $2}' /proc/meminfo))
memused="$((mem[0] - mem[1]))"
memused="$((memused / 1024))"
memtotal="$((mem[0] / 1024))"
memory="${memused}MB / ${memtotal}MB"
msgFunc norm "RAM used/total = ($memory)"
msgFunc green "Package Information"
msgFunc norm "All installed packages: $(pacman -Q | wc -l)" 
msgFunc norm "All native packages: $(pacman -Qn | wc -l)" 
msgFunc norm "All explicitly installed packages: $(pacman -Qe | wc -l)" 
msgFunc norm "ALL explicitly installed native packages that are"
msgFunc norm "not direct or optional dependencies: $(pacman -Qqent | wc -l)"
msgFunc norm "All explicitely installed pkgs not base/base-devel grps: \
$(comm -23 <(pacman -Qeq | sort) <(pacman -Qgq base base-devel | sort) | wc -l ) "
msgFunc norm "All foreign installed packages: $(pacman -Qm | wc -l)"
msgFunc norm "All foreign explicitly installed packages: $(pacman -Qme | wc -l)"
msgFunc green "Accessing archlinux.org Network Database...."
msgFunc norm   "Number of Pacman updates ready: $(checkupdates | wc -l)" 
msgFunc norm "Number of updates for installed AUR packages ready: $(cower -u | wc -l)"
msgFunc norm "Number of upgradable Arch-audit vulnerable packages: $(arch-audit -qu | wc -l)"
msgFunc anykey 
clear
}

#FUNCTION HEADER
# NAME :           readconfigFunc
# DESCRIPTION:read the config file into program if not there   
#use hardcoded defaults config file is for paths for backup function
#Called when needed by program also can be called by user option or main menu
# passed USERCALL
# INPUTS $1 USERCALL when called by user
# OUTPUTS : sets paths for backup function 
# PROCESS : read $Dest5/cylonCfg.conf
#NOTES :   file is optional       
function readconfigFunc
{
	#check input if called by user from menu or option
	if [ "$1" = "USERCALL" ]
		then
		cd "$Dest5"  || exitHandlerFunc dest5
		if [ -f "$Dest5/cylonCfg.conf" ] 
			then
				msgFunc green "Do you want to edit or view? [e/V]"
				read -r choiceCC1
				if [ "$choiceCC1" = "e" ]
					then
						nano  "$Dest5/cylonCfg.conf" || exitHandlerFunc fileerror "$Dest5/cylonCfg.conf"
						clear
						msgFunc green "Exiting config file edit option"
						msgFunc anykey "and exit cylon."
						exit 0
					else
					msgFunc green  "Custom paths read from file"
					cat "$Dest5/cylonCfg.conf" || exitHandlerFunc fileerror "$Dest5/cylonCfg.conf"
					msgFunc green "Done!"
					msgFunc anykey
					return
				fi
			else
				exitHandlerFunc fileerror "$Dest5/cylonCfg.conf"
		fi
	fi
	
	#read cylon.conf for system back up paths 
	msgFunc green "Reading config file cylonCfg.conf at:-"
	msgFunc norm "$Dest5"
	#check if file there if not use defaults.
	if [ ! -f "$Dest5/cylonCfg.conf" ]
		then
		msgFunc red "No config found: Use the default hardcoded paths"
		#path for an internal hard drive backup
		Destination1="/run/media/$USER/Linux_backup"
		#path for an external hard drive backup
		Destination2="/run/media/$USER/iomeaga_320"
		#default paths for gdrive sync upload path 1 		#path2 
		gdriveSource1="$HOME/Documents"
		gdriveDest1="0B3_YYY"
		gdriveSource2="$HOME/Pictures"
		gdriveDest2="0B3_XXXX"
		gdriveSource3="$HOME/Videos"
		gdriveDest3="XXXXYYY"
		gdriveSource4="$HOME/.config"
		gdriveDest4="0B3_RVJ50UWFAdm"
		#paths for rsync option
		rsyncsource="$HOME/"
		rsyncDest="/run/media/$USER/Linux_backup/Hbp_rsync_101016"
		#ccyptfile
		myccfile="XXXX"
		msgFunc green "Done!"
		return
	fi
	cd "$Dest5"  || exitHandlerFunc dest5
	# shellcheck disable=SC1091
	source ./cylonCfg.conf || exitHandlerFunc fileerror "$Dest5/cylonCfg.conf"
	msgFunc green  "Custom paths read from file"
	cat ./cylonCfg.conf || exitHandlerFunc fileerror "$Dest5/cylonCfg.conf"
	msgFunc green "Done!"
}

#FUNCTION HEADER
# NAME :           checkinputFunc
# DESCRIPTION:CHECK INPUT OPTIONS from linux command line arguments passed to program on call
# INPUTS :  $1 user input option
#-v display version and exit
#-s display system info and exit
#-h display cylon info and exit 
#-c open config file for edit.
#-u update all
#-d run bleachbit default as set in GUI
#-b run the bleachbit function
function checkinputFunc
{
case "$1" in
	"");;
	-u|--update) #update system report 
		updateFunc
	;;
	-c|--config)
		readconfigFunc "USERCALL"
		;;
	-d|--default)
#Bleachbit system clean. Use the options set in the GUI
		msgFunc green "Bleachbit system clean"  
		msgFunc norm "Preset options see $HOME/.config/bleachbit/ or GUI "
		msgFunc anykey "To run bleachbit -c --preset"
		msgFunc norm  "Running bleachbit -c --preset"
		bleachbit -c --preset
		msgFunc green "Done!"
		;;
	-v|--version)
		msgFunc norm "$(pacman -Qs cylon)" 
		;;
	-s|--system)
		HelpFunc SYS
		;;
	-h|--help)
		HelpFunc HELP
		;;
	-b|--bleachbit)
		SystemCleanFunc
	;;
	-m|--maint)
		SystemMaintAutoFunc
	;;
	*) msgFunc yellow "Invalid option, Usage: -b -c -d -h -m -s -u -v"
	  msgFunc yellow "See readme.md for details at cylon -h "
	;;
esac
#was there a input if yes quit?
if [ -n "$1" ] 
	then
		exit 0 
fi
clear
}

#FUNCTION HEADER
# NAME :  WeatherFunc
# DESCRIPTION:3 day weather forecast
function WeatherFunc
{
					msgFunc norm "3 day weather forecast by WTTR.IN"
					msgFunc norm "Type a City name, airport code, domain name or area code:-"
					read -r mycity		
					clear
					curl wttr.in/"$mycity"
					msgFunc anykey 
					clear
}

##FUNCTION HEADER
# NAME :  updatefunc
# DESCRIPTION: called from checkinputfunc or main menu.
function updateFunc
{
		clear
		#check if arch-audit package  installed
		if ! msgFunc checkpac arch-audit
		then
			msgFunc anykey 
			clear
		return
		fi
		#check if pacaur package  installed
		if ! msgFunc checkpac pacaur
		then
			msgFunc anykey 
			clear
		return
		fi
		msgFunc line
		RssFunc
		msgFunc anykey
		msgFunc line
		msgFunc green "Arch-audit upgradable vulnerable packages"
		arch-audit -u
		msgFunc norm " "
		msgFunc green "Arch-audit vulnerable packages"
		arch-audit -q
		msgFunc anykey
		msgFunc line
		msgFunc green "Number of Pacman updates ready ..> $(checkupdates | wc -l)"	
		checkupdates
		msgFunc line
		msgFunc green "Number of updates available for installed AUR packages ..> $(cower -u | wc -l)"
		cower -uc
		msgFunc line
		msgFunc green "Install ALl updates? pacaur -Syu	 [Y/n]"
		read -r choiceIU3
			if [ "$choiceIU3" != "n" ]
				then
					pacaur -Syu	
			fi
		msgFunc green "Done!"
		msgFunc anykey
}
