#FUNCTION HEADER
# NAME :      pacaurFunc
# DESCRIPTION:use pacaur utility to mange AUR packages
# downloads, updates and searches
# PROCESS : 8 options, see options array 
#NOTES :    needs pacaur(AUR) installed  gnu-netcat is needed 1 option      
function pacaurFunc
{
	       #check if installed
            if ! msgFunc checkpac pacaur
				then
				msgFunc anykey 
				return
			fi
			clear
			msgFunc line
		    msgFunc green "AUR packages management by pacaur. Number of foreign packages installed = $(pacman -Qm | wc -l)"
		    msgFunc line
		    #AUR warning
			msgFunc norm
	         cat <<-EOF
			 Note: The Arch User Repository (AUR) is a community-driven repository for Arch users
			 When installing packages or installing updates > user beware.
			 Also setting TargetDir in cower config file must not be set.
			EOF
			msgFunc blue "Pacaur options:-"
			optionsP=("Check network and then check for AUR updates (no download), pacaur -k"\
				"Search for package, pacaur -s" "Display information for package, pacaur -i"\
	         	 "Get updates for installed packages, pacaur -u" "Download and install a package, pacaur -y"\
	         	 "Download files and build the package(no install), pacaur -m " "Download the package files only, pacaur -d"\
	         	  "Delete pacaur cache" "Edit pacaur config file" "Update all packages in all repositories, pacaur -Syu"\
	         	  "List of all foreign packages installed" "List all foreign packages explicitly installed" \
	         	  "Remove foreign packages explicitly installed menu" "Return")
	         	select choiceP in "${optionsP[@]}"
	         	do
				case "$choiceP" in  
					"${optionsP[0]}")    #check updates
						msgFunc green  "Check network and then check for updates, pacaur -k"
						#check network connectivity if good get updates numbers from arch
						msgFunc checkNet "aur.archlinux.org"
						msgFunc norm "Number of updates available for installed AUR packages :..."
						pacaur -k | wc -l
						pacaur -k
						msgFunc anykey
					;;
					"${optionsP[1]}") #search
						msgFunc green "Search for package in AUR pacaur -s"
						msgFunc norm "Type a AUR package name:-"
					      read -r pacaurP		
						  pacaur -s "$pacaurP" || return
						  msgFunc anykey
					;;
					"${optionsP[2]}") #info
						msgFunc green "Display information for package in AUR pacaur -i"
						msgFunc norm "Type a AUR package name:-"
					      read -r pacaurP		
						  pacaur -i "$pacaurP" || return
						  msgFunc anykey
					;;

				   "${optionsP[3]}")  #get updates
					msgFunc green "Update AUR packages.  pacaur -u  "	
					 pacaur -u
					 msgFunc anykey
					;;
					"${optionsP[4]}")  #download build and install from AUR by pacaur
					      msgFunc green "Download package. pacaur -y"
						  msgFunc norm "Type a AUR package name:-"
					      read -r pacaurP		
						  pacaur -y "$pacaurP" || return
						  msgFunc anykey
					;;
					"${optionsP[5]}") #Clone build files and build target package
						msgFunc green "Clone build files and build target package in AUR. pacaur -m"
						msgFunc norm "Type a AUR package name:-"
					      read -r pacaurP		
						  pacaur -m "$pacaurP" || return
						  msgFunc anykey
					;;
					"${optionsP[6]}") #Clone the target(s) build files
						msgFunc green "Clone the package build files  in AUR. pacaur -d"
						msgFunc norm "Type a AUR package name:-"
					      read -r pacaurP		
						  pacaur -d "$pacaurP" || return
						  msgFunc anykey
					;;
					"${optionsP[7]}")  #delete pacaur cache see man pacaur for details
						#check if custom AURDEST environmental variable defined
						if [ -d "$AURDEST" ] 
							then
								msgFunc red "AURDEST environmental variable set, please do manual delete"
							else
								msgFunc green "Deleting the pacaur cache"
								if  [ -d "$XDG_CACHE_HOME/pacaur/" ]
								then
									rm -rvf "$XDG_CACHE_HOME"/pacaur/* 
								else
									rm -rvf "$HOME"/.cache/pacaur/*
								fi
						fi
					;;
					"${optionsP[8]}") #edit the config file see man pacaur for details
						msgFunc green "Do you wish to edit the user pacaur config file or system [u/S]?"
						read -r pacaurP	
						if [ "$pacaurP" = "u" ] 
							then #user file
								if [ -f  "$XDG_CONFIG_HOME/pacaur/config" ] 
								then
									nano "$XDG_CONFIG_HOME/pacaur/config" 
								else 
									if  [ -f "$HOME/.config/pacaur/config" ] 
									then
									 nano "$HOME/.config/pacaur/config"   
									 else
									 msgFunc red "user config File does not exist"
									fi
								fi
							else #system file
								if [ -f "$XDG_CONFIG_DIRS/pacaur/config" ]
								then
									sudo nano "$XDG_CONFIG_DIRS/pacaur/config"
								else 
									if [ -f "/etc/xdg/pacaur/config" ] 
									then
									sudo nano "/etc/xdg/pacaur/config" 
									else
									msgFunc red "system config File does not exist"
									fi
								fi
						fi
						msgFunc anykey
					;;
					"${optionsP[9]}") #update all repos
						msgFunc green "Update all packages in all repositories, pacaur -Syu"
						pacaur -Syu
						msgFunc anykey
						;;
						"${optionsP[10]}") #"List of all foreign packages
						msgFunc green "List of all foreign packages installed"
					     msgFunc norm "Number of foreign packages installed = $(pacman -Qm | wc -l)"
						pacman -Qm 
						msgFunc anykey
						;;
						
						 "${optionsP[11]}") #List of all foreign packages explicitly installed
						msgFunc green "List of all foreign packages explicitly installed"
					     msgFunc norm "Number of foreign packages explicitly installed = $(pacman -Qme | wc -l)"
						pacman -Qme 
						msgFunc anykey
						;;
						
						"${optionsP[12]}") #Delete foreign packages explicitly installed
							DelQmeFunc
						;;
						*)  #exit  
						 msgFunc green "Done!"	
						return
						;;
				esac
				break
				done
				msgFunc green "Done!"	
			
}    
