#FUNCTION HEADER
# NAME :           SystemMaintFunc
# DESCRIPTION:carries out 6 maintenance checks  
# OUTPUTS : various output files 
# PROCESS : systemd , SSD trim , broken syslinks ,journalcontrol errors
#lostfiles check with lostfiles package, systemdanalysis boot, 
#NOTES :    needs lostfiles (AUR)  installed       

function SystemMaintFunc
{
	        clear 
	        optionsM2=("Failed Systemd Services and status" "Check Journalctl log for Errors"\
				"Check Journalctl for fstrim SSD trim" "Analyze system boot-up performance"\
				"Check for Broken Symlinks" "Find files where no group or User corresponds to file's numeric ID"\
				"$(msgFunc checkpac lostfiles NOMES)" "Diskspace usage" "Old configuration files scan"\
				 "Print sensors information" "Clean journal files"\
				 "Delete core dumps /var/lib/systemd/coredump/" "Delete files"\
				  "Password generator" "$(msgFunc checkpac inxi NOMES)" "Return")

		   #change dir for log files
	        msgFunc dir "-SYSINFO"
			msgFunc norm "Files report will be written to path above -"
			msgFunc blue "System Maintenance options"
			select  choiceM in "${optionsM2[@]}"
			do
			case  "$choiceM" in
			"${optionsM2[0]}")
				  # -systemd --failed:
				msgFunc green "Systemd status"
				msgFunc green "Done!"
				systemctl status > Systemdstatus
				msgFunc green "All Failed Systemd Services"
				systemctl --failed --all
				systemctl --failed --all > Systemderrlog
				msgFunc green "Done!"
				msgFunc green "All Failed Active Systemd Services"
				systemctl --failed
				systemctl --failed >> Systemderrlog
            ;;
			"${optionsM2[1]}")
					# -Logfiles:
					msgFunc green "Check log Journalctl for Errors"
					journalctl -p 3 -xb > Journalctlerrlog
            ;;
            
            "${optionsM2[2]}")
				#check if ssd trim functioning  ok in log
				#am I on a sdd drive? , 0 for SDD 1 for HDD from command
				SDX="$(df /boot/ --output=source | tail -1 | cut -c 6-8)"
						SDX=$(grep 0 /sys/block/"$SDX"/queue/rotational) 
					if [ "$SDX" = "0" ] 
						then
						msgFunc green "Check Journalctl for fstrim SSD trim"
						echo "SSD trim" > JournalctlerrSDDlog
						journalctl -u fstrim > JournalctlerrSDDlog
						else 
						msgFunc red "HDD detected no SSD trim check done"
					fi
			;;
			
			"${optionsM2[3]}")
					# systemd-analyze - Analyze system boot-up performance
					msgFunc green "Analyze system boot-up performance"
		            {
		            echo "Analyze boot-up performance"  
		            systemd-analyze time 
		            echo "CRITICAL-CHAIN" 
		            systemd-analyze critical-chain 
		            echo "BLAME" 
		            systemd-analyze blame 
				     } >>  systemdanalyzelog   
            ;;
            "${optionsM2[4]}")
					#Checking for broken symlinks:
					msgFunc green "Checking for Broken Symlinks"
					#root or home?
					msgFunc norm "Do you want to scan / or $HOME? [R/h]"
					read -r choiceSYM
					if [ "$choiceSYM" = "h" ]
					then
						find "$HOME" -type l -! -exec test -e {} \; -print > symlinkerr
		            else
						find / -path /proc -prune -o -type l -! -exec test -e {} \; -print 2>/dev/null > symlinkerr
					fi
					;;
			
			 "${optionsM2[5]}")
				msgFunc green "Find files where no group or User corresponds to file's numeric user/group ID."
				find / -nogroup > filenogrouplog 2> /dev/null
				find / -nouser  > filenouserlog  2> /dev/null
			;;
			
			 "${optionsM2[6]}")
				#check if lostfiles package (AUR) installed
		    if ! msgFunc checkpac lostfiles
			then
				msgFunc anykey 
			return
			fi
			msgFunc green "Lostfiles :-Search for files which are not part of installed Arch Linux packages"
			msgFunc norm  "Lostfiles strict scan running, outputing to file"
			sudo bash -c "lostfiles strict  > lostfilesStrictlist.txt" 
			msgFunc green "Done!"
			msgFunc norm  "Lostfiles relaxed scan running, outputing to file"
		    sudo bash -c  "lostfiles relaxed > lostfilesRelaxedlist.txt" 
			;;
			
			"${optionsM2[7]}")
				msgFunc green "diskspace usage"
				# This is GOLD for finding out what is taking so much space on your drives!
					msgFunc norm "Do you want to scan / or $HOME? [R/h]"
					read -r choiceDU
					if [ "$choiceDU" = "h" ]
					then
						du -H "$HOME" 2> /dev/null | sort -n -r >> diskspace
		            else
						du -H / 2> /dev/null | sort -n -r >> diskspace
					fi
			       ;;
			 "${optionsM2[8]}") #old config files
			 msgFunc green "Old configuration files scan"
cat <<-EOF
Old configuration files may conflict with newer software versions,
or corrupt over time. Remove unneeded configurations periodically, 
This option will scan three folders and compare names of dirs with
names of installed packages and output result to files.
~/.config/ -- where apps stores their configuration
~/.cache/ -- cache of some programs may grow in size
~/.local/share/ -- old files may be lying there
The user can then inspect these files and remove anything unwanted.
EOF
 msgFunc anykey
					MYARRAY=$(find "$HOME/.config" -maxdepth 1 -type d  | awk -F"/" '{print $5}')
					MYARRAY1=$(find "$HOME/.cache" -maxdepth 1 -type d  | awk -F"/" '{print $5}')
					MYARRAY2=$(find "$HOME/.local/share" -maxdepth 1 -type d  | awk -F"/" '{print $6}')
					IFS=$'\n' MYARRAY=($(sort <<<"${MYARRAY[*]}"))
					unset IFS
					IFS=$'\n' MYARRAY1=($(sort <<<"${MYARRAY1[*]}"))
					unset IFS
					IFS=$'\n' MYARRAY2=($(sort <<<"${MYARRAY2[*]}"))
					unset IFS
					# get length of an array
					tLen="${#MYARRAY[@]}"
					tLen1="${#MYARRAY1[@]}"
					tLen2="${#MYARRAY2[@]}"
					# use for loop read all installed packages 
					msgFunc green "$HOME/.config/ -- where apps stores their configuration"
					for (( i=0; i<"${tLen}"; i++ ));
					do
							if  msgFunc checkpac "${MYARRAY[i]}" 
							then
									unset "MYARRAY[i]"
							fi
					done
					msgFunc anykey
					printf "%s\n" "${MYARRAY[@]}" > HOMECONFIGfile
						# use for loop read all installed packages
					msgFunc green " $HOME/.cache/ -- cache of some programs may grow in size"
					for (( i=0; i<"${tLen1}"; i++ ));
					do
							if  msgFunc checkpac "${MYARRAY1[i]}" 
							then
									unset "MYARRAY1[i]"
							fi
					done
					msgFunc anykey
					printf "%s\n" "${MYARRAY1[@]}" > HOMECACHEfile 
					 msgFunc green "$HOME/.local/share/ -- old files may be lying there"
					for (( i=0; i<"${tLen2}"; i++ ));
					do
							if  msgFunc checkpac "${MYARRAY2[i]}" 
							then
									unset "MYARRAY2[i]"
							fi
					done
					printf "%s\n" "${MYARRAY2[@]}" > HOMELOCALSHAREfile
				;;
				"${optionsM2[9]}")
						msgFunc green "Print sensor information"
						sensors
			    ;;
			    "${optionsM2[10]}")
						msgFunc green "Clean journalctl files(systemd logging system)"
						msgFunc norm "Remove archived journal files until the disk space they use falls "
						msgFunc norm "below 100M: press y or any other key to quit [y/N]"
						read -r choiceDJ
							if [ "$choiceDJ" = "y" ]
							then
								journalctl --vacuum-size=100M
							else
								return
							fi
			    ;;
			    "${optionsM2[11]}")
						msgFunc green "Delete core dumps /var/lib/systemd/coredump/"
						sudo rm -rvf /var/lib/systemd/coredump/*
			    ;;
			    "${optionsM2[12]}")  # delete folders /files
						SystemCleanFunc "FOLDERS"
			    ;;
				#"Password generator" 
				"${optionsM2[13]}")
					msgFunc green "Random Password generator"
					msgFunc norm "Enter length:-"
					read -r mylength
					if [ -z "$mylength" ]; then
						mylength=50
					fi
				   echo -n "$(< /dev/urandom tr -dc "_*?#!A-Z-a-z-0-9" | head -c"${1:-$mylength}";)"	> pg	  
				;;
				
				"${optionsM2[14]}")
						#check if inxi package  installed
						if ! msgFunc checkpac inxi
						then
							msgFunc anykey 
							clear
						break
						fi
						# inxi  - Command line system information script for console and IRC
						msgFunc green "get output of inxi -Fixz"
						inxi -Fixz | tee inxioutput
				;;
			
				
				*)#quit
				msgFunc green "Done!"
				return
				;;
				
			esac
			break 
			done
			msgFunc green "Done!"	
			msgFunc anykey 
			clear
}
