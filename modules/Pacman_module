#!/bin/bash
#module containing pacman pkglist generator and arch news rss reader
#function called from cylon package

#FUNCTION HEADER
# NAME : PacmanFunc
# DESCRIPTION : Pacman package manager options
# PROCESS : See options array      
#NOTE gnu-netcat is neeeded for the first option.      
function PacmanFunc 
{
			clear
			#Pacman package manager options:
			msgFunc line
			msgFunc green "Pacman package manager. Number of packages installed = $(pacman -Q | wc -l) "
			msgFunc line
			msgFunc blue "Pacman package manager options:-"
			options=("Check for pacman updates (no download)" "pacman -Syu Upgrade packages" \
			"pacman -Si Display extensive information about a given package" "pacman -S Install Package" \
			"pacman -Ss Search for packages in the database" \
			"pacman -Rs Remove Package" "pacman -Qs Search for already installed packages" \
			"pacman -Qi  Display extensive information for locally installed packages" "pacman -Ql  List all files owned by a given package." \
			"pacman -Qkk Verify packages" "paccache -r Prune older packages from cache, Keep last 3"\
			"Remove all packages not required as dependencies (orphans)" "Make a copy of package lists"  \
			"Back-up the local pacman database" "Arch Linux News Rss feed" "$(msgFunc checkpac arch-audit  NOMES)" \
			"pactree options" "Edit pacman config file" "Return to main menu")
			select choicep in "${options[@]}"
			do
			case "$choicep" in
					"${options[0]}")
					msgFunc green "Pacman updates ready:-.... "
					#check gnu-netcat is installed
					#check network connectivity if good get updates numbers from arch
						msgFunc checkNet "archlinux.org"
						msgFunc norm   "Number of Pacman updates ready...> $(checkupdates | wc -l)"
						checkupdates
					;;
					"${options[1]}") #update pacman
						msgFunc green "Update system with Pacman."
						sudo pacman -Syu
					;;
					"${options[2]}") #pacman -Si Display extensive information about a given package
						msgFunc green "Display information  for Package."
						msgFunc norm "Please enter package name"
						read -r pacString
						pacman -Si "$pacString"
					;;
					"${options[3]}") #pacman -S Install Package
						msgFunc green "Install package."
						msgFunc norm "Please enter package name"
						read -r pacString
						sudo pacman -S "$pacString"
					;;
					"${options[4]}")   #pacman -Ss Search Repos for Package
						msgFunc green "Search for packages in the database."
						msgFunc norm "Please enter package name"
						read -r pacString
						pacman -Ss "$pacString"
					;;
					"${options[5]}") #pacman -Rs Delete Package
						msgFunc green "Remove Package."
						msgFunc norm "Please enter package name"
						read -r pacString
						sudo pacman -Rs "$pacString"
					;;
					"${options[6]}")   #pacman -Qs Search for already installed packages
						msgFunc green "Search for already installed packages."
						msgFunc norm "Please enter package name"
						read -r pacString
						pacman -Qs "$pacString"
					;;
					"${options[7]}") #pacman -Qi Display extensive information about a given package(local install)
						msgFunc green "Display information  for Package."
						msgFunc norm "Please enter package name"
						read -r pacString
						pacman -Qi "$pacString"
					;;
					"${options[8]}") #pacman -Ql  List all files owned by a given package.
						msgFunc green "List all files owned by a given package."
						msgFunc norm "Please enter package name"
						read -r pacString
						pacman -Ql "$pacString"
					;;
					"${options[9]}") #pacman -Qkk  Verify all packages
						msgFunc dir "-PKGINFO"
						msgFunc green "Verify  packages pacman -Qkk"
						msgFunc norm "1 package or All? [1/A]"
						read -r choicePAC
						if [ "$choicePAC" = "1" ] 
						then
							msgFunc norm "Please enter package name"
							read -r pacQString
							pacman -Qkk "$pacQString" > pkgver
						else
							pacman -Qkk > pkgverall
						fi
					;;
					"${options[10]}")  msgFunc green  "Prune older packages from cache, paccache -r Keeps last 3"
					#The paccache script, deletes all cached  package 
						#regardless of whether they're installed or not, 
						#except for the most recent 3, 
							sudo paccache -r
					;;
					
					"${options[11]}")   #delete orphans
						msgFunc green "Delete orphans!"
						#Remove all packages not required as dependencies (orphans)
						sudo pacman -Rns "$(pacman -Qtdq)"
					;;

					"${options[12]}")
						msgFunc green "Make copy of package lists"
						pkglistFunc 
					;;
					"${options[13]}") #backup the pacman database
						msgFunc green "Back-up the pacman database to :"
						msgFunc dir "-BACKUPPACMAN"
						tar -v -cjf pacman_database.tar.bz2 /var/lib/pacman/local
					;;

					
					"${options[14]}") #Arch Linux News Rss feed
						RssFunc
						;;
						
					"${options[15]}") #run arch audit
						msgFunc green "Running arch-audit program :"
						#check archaudit is installed
						if ! msgFunc checkpac arch-audit
							then
							msgFunc anykey 
							return
						fi
						msgFunc norm "Press [A] for full output: or other options> -q=quiet, -u=upgradable, -uq."
						read -r ARCHAUDIT
						if [ "$ARCHAUDIT" = "A" ] 
							then
							arch-audit
							else
							 arch-audit "$ARCHAUDIT"
						fi 
						ARCHAUDIT=
						;;
					
						"${options[16]}") #pactree
									msgFunc green "pactree options"
									msgFunc norm "List a dependency tree of a package: pactree"
									msgFunc norm "Show packages that depend on the named package: pactree -r"
									msgFunc norm "press [A] for pactree or [r] for pactree -r. [A/r]"
									read -r PACTREE
									if [ "$PACTREE" != "r" ]
									then
										msgFunc norm "Please enter package name"
										read -r pacString
										pactree "$pacString"
									else
										msgFunc norm "Please enter package name"
										read -r pacString
										pactree -r "$pacString"
									fi
						;;
						"${options[17]}") #edit pacman conf file
							msgFunc green "Edit Pacman.conf file."
							sudo nano  /etc/pacman.conf
						;;
							
						*)  #exit  
							msgFunc green "Done!"	
							clear
							return
						;;
			esac
			break
			done
			msgFunc green "Done!"	
			msgFunc anykey 
}

#FUNCTION HEADER
# NAME :            RssFunc
# DESCRIPTION :     Display 4 Arch Linux News Rss feed
function RssFunc 
{
	#Display 4 Arch Linux News Rss feed
				msgFunc green "Arch Linux News Rss feed last 4 items"
				# Set N to be the number of latest news to fetch
				NEWS=$(echo -e $(curl --silent https://www.archlinux.org/feeds/news/  | awk ' NR == 1 {N = 4 ; while (N) {print;getline; if($0 ~ /<\/item>/) N=N-1} ; sub(/<\/item>.*/,"</item>") ;print}'))
				#  THE RSS PARSER Remove some tags 
				NEWS=$(echo -e "$NEWS" | \
				awk '{
				sub(/<lastBuildDate[^>]*>([^>]*>)/,"");sub(/<language[^>]*>([^>]*>)/,"");sub(/<title[^>]*>([^>]*>)/,"");sub(/<link[^>]*>([^>]*>)/,""); 
				while (sub(/<guid[^>]*>([^>]*>)/,"")); 
				while (sub(/<dc:creator[^>]*>([^>]*>)/,""));
				while (sub(/<description[^>]*>([^>]*>)/,"")); print }' | \
				sed -e ':a;N;$!ba;s/\n/ /g')
			    echo -e "$(echo -e "$NEWS" | \
				sed -e 's/&amp;/\&/g
				s/&lt;\|&#60;/</g
				s/&gt;\|&#62;/>/g
				s/<\/a>/£/g
				s/href\=\"/§/g
				s/<title>/\\n\\n :: \\e[01;31m/g; s/<\/title>/\\e[00m ::/g
				s/<link>/\\n [ \\e[01;36m/g; s/<\/link>/\\e[00m ]\\n/g
				s/<p\( [^>]*\)\?>\|<br\s*\/\?>/\n/g
				s/<b\( [^>]*\)\?>\|<strong\( [^>]*\)\?>/\\e[01;30m/g; s/<\/b>\|<\/strong>/\\e[00;37m/g
				s/<i\( [^>]*\)\?>\|<em\( [^>]*\)\?>/\\e[41;37m/g; s/<\/i>\|<\/em>/\\e[00;37m/g
				s/<u\( [^>]*\)\?>/\\e[4;37m/g; s/<\/u>/\\e[00;37m/g
				s/<code\( [^>]*\)\?>/\\e[00m/g; s/<\/code>/\\e[00;37m/g
				s/<a[^§|t]*§\([^\"]*\)\"[^>]*>\([^£]*\)[^£]*£/\\e[01;31m\2\\e[00;37m \\e[01;34m[\\e[00;37m \\e[04m\1\\e[00;37m\\e[01;34m ]\\e[00;37m/g
				s/<li\( [^>]*\)\?>/\n \\e[01;34m*\\e[00;37m /g
				s/<!\[CDATA\[\|\]\]>//g
				s/\|>\s*<//g
				s/ *<[^>]\+> */ /g
				s/[<>£§]//g')"    
				#end
}

#FUNCTION HEADER
# NAME :            pkglistFunc
#INPUT $1 Backup if called from backup do not create directory
# DESCRIPTION :creates a copy of packages list see below.
#OUTPUT seven files see below
#NOTE called from pacman pacur cower and backup  functions 
function pkglistFunc
{
				msgFunc green "Making a copy of package lists "
				#check for input if Backup called from backup do not create dir
				if [ "$1" != "Backup" ]
				then
					msgFunc dir "-PKGINFO"
				fi
				
				msgFunc green "All installed packages: pkglistQ.txt" 
				pacman -Q | wc -l
				pacman -Q  > pkglistQ.txt
				
				msgFunc green "All native packages: pkglistQn.txt" 
				pacman -Qn | wc -l
				pacman -Qn > pkglistQn.txt
				
				msgFunc green "All explicitly installed packages: pkglistQe.txt" 
				pacman -Qe | wc -l
				pacman -Qe  > pkglistQe.txt
				
				msgFunc green "ALL explicitly installed native packages that are"
				msgFunc green "not direct or optional dependencies: pkglistQgent.txt"
				pacman -Qqent | wc -l
				pacman -Qqent > pkglistQqent.txt
				
				msgFunc green "All foreign installed packages: pkglistQm.txt"
				pacman -Qm | wc -l
				pacman -Qm > pkglistQm.txt
				
				msgFunc green "All foreign explicitly installed packages: pkglistQme.txt"
				pacman -Qme | wc -l
				pacman -Qme > pkglistQme.txt
				
				msgFunc green "All explicitly installed packages not in base nor base-devel with size"
				msgFunc green "and description: pkglistNonBase.txt"
				expac -H M "%011m\t%-20n\t%10d" $(comm -23 <(pacman -Qqen | sort) <(pacman -Qqg base base-devel | sort))\
				| sort -hr > pkglistNonBase.txt 
				wc -l < pkglistNonBase.txt 
				
				msgFunc green "All installed packages sorted by size: pkglistSize.txt"
				expac -H M '%m\t%n' | sort -hr > pkglistSize.txt
				
				msgFunc green "All installed packages sorted by install date: pkglistDate.txt"
				expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort -hr > pkglistDate.txt
}
