#!/bin/bash
#module containing functions called from cylon package
#Functions: checkinputFunc, DisplayFunc. AsciiArtFunc
# exitHandlerFunc, HelpFunc, msgFunc, readconfigFunc, weatherFunc, makeDirFunc

#FUNCTION HEADER
# NAME : msgFunc
# DESCRIPTION :   prints to screen
#prints line, text and anykey prompts, yesno prompt
# INPUTS : $1 process name $2 text input
# PROCESS :[1]  print line [2] anykey prompt
# [3] print text  "green , red ,blue , norm yellow and highlight" [4] yn prompt, 
# OUTPUT yesno prompt return 1 or 0                       
function msgFunc
{
	
	case "$1" in 
	
		line) #print blue horizontal line of =
			printf '\033[36;1m%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' =
			printf '%s' "${NORMAL}"
		;;
		anykey) #any key prompt, appends second text input to prompt
		    printf '%s' "${GREEN}" 
			read -n 1 -r -s -p "Press any key to continue $2"
			printf '%s\n' "${NORMAL}"
		;;
		
		#print passed text string
		green) printf '%s\n' "${GREEN}$2${NORMAL}" ;;
		red) printf '%s\n' "${RED}$2${NORMAL}" ;;
		blue) printf '%s\n' "${BLUE}$2${NORMAL}" ;;
		yellow)printf '%s\n' "${YELLOW}$2${NORMAL}" ;;
		highlight)printf '%s\n' "${HL}$2${NORMAL}" ;;
		norm) printf '%s\n' "${NORMAL}$2" ;;
			
		yesno) #print yes no quit prompt
			local yesnoVar=""
			while true; do
				read -r yesnoVar
				case $yesnoVar in
					[Yy]*) return 0;;
					[Nn]*) return 1;;
					[Qq]*) exitHandlerFunc exitout;;
					*) printf '%s\n' "${YELLOW}Please answer: (y/Y for yes) OR (n/N for no) OR (q/Q to quit)!${NORMAL}";;
				esac
			done
		;;
		*) 
			printf '%s\n' "ERROR unknown input to msgFunc"
			 ;;
	esac
}


#FUNCTION HEADER
# NAME :  exitHandlerFunc 
# DESCRIPTION: error handler deal with user 
#exits and path not found errors and internet failure 
# INPUTS:  $2 text of internet site down or filename 
# PROCESS : exitout DEST 1-6 netdown or file error or non-integer user input.
# or bad argument option input
function exitHandlerFunc
{
	#double square brackets without use of quotes on matching pattern 
	#for glob support
	if [[ "$1" = DEST* ]]
	then
		msgFunc red "Path not found to Destination directory"
	fi
	case "$1" in
			exitout) msgFunc norm "";;
			DEST1) msgFunc norm "$Destination1" ;;
			DEST2) msgFunc norm "$Destination2" ;;
			DEST3) msgFunc norm "$DEST3" ;;
			DEST4) msgFunc red "Path not found to directory" ;;
			DEST5) msgFunc norm "$DEST5" ;;
			DEST6) msgFunc norm "$DEST6" ;;
			netdown) msgFunc red "Internet connectivity test to $2 failed" ;;
			fileerror) msgFunc red "File error $2"  ;;
			nonint) msgFunc red "Integer expected, user entered non-integer, program exiting";;
			Badinput)
				msgFunc red "$2 is an INVALID USER OPTION!"
				msgFunc yellow "Usage: -b -c -d -h -l -m -n -p -r -s -u -v -z"
				msgFunc yellow "type cylon -h for readme or man cylon for manpage at terminal"
				msgFunc anykey "to view option details"
				man cylon | grep -A39 OPTIONS 
				;;
			*) msgFunc yellow "Unknown input to error handler";;
	 esac
	msgFunc yellow "Goodbye $USER!"
	msgFunc anykey "and exit."
	if [ "$1" = "exitout" ]
	then
		#non-error exit
		exit 0
	fi 
	exit 1
}

#FUNCTION HEADER
# NAME : DisplayFunc
# DESCRIPTION : Function to display main menu
function DisplayFunc
{
msgFunc blue "Main Menu:"
	local choiceMainVar
	local optionsMArr=(
	"pacman" "$(checkPacFunc cower NOMES)" \
	"$(checkPacFunc pacaur NOMES)" "System Update" "System Maintenance" \
	"System backup" "System Security" "Network Maintenance" \
	"xterm terminal" "View/Edit config file"\
	  "System information" "Cylon information" "Weather" "Exit"\
	)
	select choiceMainVar in "${optionsMArr[@]}"
	do
	case "$choiceMainVar" in
			"${optionsMArr[0]}")   #pacman update
				PacmanFunc
			;;
			"${optionsMArr[1]}") #cower AUR helper
				CowerFunc
			;;
			"${optionsMArr[2]}") #pacaur AUR helper
				pacaurFunc
			;;
			"${optionsMArr[3]}") #full system update.
				updateFunc
			;;
			"${optionsMArr[4]}") #system maintenance
				SystemMaintFunc 
			;;
			"${optionsMArr[5]}")  #Full system backup
				SystemBackFunc 
			;;
			"${optionsMArr[6]}")  #System security
				SystemSecFunc "$@"
			;;
			"${optionsMArr[7]}")  # network utiltes
				networkFunc
			;;
			"${optionsMArr[8]}")  # open a terminal
				xterm -e "cd $DEST3  && /bin/bash"
				msgFunc anykey
			;;
			"${optionsMArr[9]}")   #config file edit or view
				readconfigFunc "USERCALL"
			;;
			"${optionsMArr[10]}") #system info
				HelpFunc "SYS"
			;;
			"${optionsMArr[11]}")  # cylon info and cat readme file to screen 
				HelpFunc "HELP"
			;;
			"${optionsMArr[12]}")  # 3 day forecast weather
				WeatherFunc
			;;
			*)#exit
				exitHandlerFunc exitout 
			;;
	esac
	break
	done

}

#FUNCTION HEADER
# NAME :            HelpFunc
# DESCRIPTION :     two sections one prints various system information the
# other cylon information and the installed readme file
# INPUTS : $1 process name either HELP or SYS    
# OUTPUTS : n/a
# PROCESS :[1] HELP =cylon info [2] SYS   =system info
function HelpFunc 
{
clear

	if [ "$1" = "HELP" ]
		then
		msgFunc line
		AsciiArtFunc "CYLON"
		msgFunc line
		#Program details print
		cat <<-EOF
		Cylon is an Arch Linux maintenance CLI program written in Bash script.
		This program provides numerous tools to Arch Linux users to carry 
		out updates, maintenance, system checks, backups and more. 
		EOF
		msgFunc norm "Written by G.Lyons, Reports to  <glyons66@hotmail.com>"
		msgFunc norm "AUR package name = cylon, at aur.archlinux.org by glyons."
		msgFunc norm "Version=$(pacman -Qs cylon | head -1 | cut -c 7-20)"
		msgFunc norm "Cylon program location = $(which cylon)"
		msgFunc norm "Cylon modules for functions = /usr/lib/cylon/modules/*"
		msgFunc norm "Folder for Cylon output data = $DEST3"
		msgFunc norm "Location of cylonCfg.conf = $DEST5"
		msgFunc norm "Location of readme.md changlog.md = $DEST6"
		msgFunc norm "Location of License.md = /usr/share/licenses/cylon"
		msgFunc norm "Man page, Desktop entry and icon also installed"
		if [ -z "${CYLONDEST}" ]
		then 
			msgFunc norm "Environment variable CYLONDEST is not Set"
		else 
			msgFunc norm "Environment variable CYLONDEST is set to $CYLONDEST"
		fi
		
		if [ -z "${CYLON_CONFIG}" ]
		then 
			msgFunc norm "Environment variable CYLON_CONFIG is not Set"
		else 
			msgFunc norm "Environment variable CYLON_CONFIG is set to $CYLON_CONFIG"
		fi
		
			if [ -z "${CYLON_COLOR_OFF}" ]
		then 
			msgFunc norm "Environment variable CYLON_COLOR_OFF is not Set"
		else 
			msgFunc norm "Environment variable CYLON_COLOR_OFF is set to $CYLON_COLOR_OFF"
		fi
		msgFunc anykey "and check which dependencies are installed"
		clear
		msgFunc norm " "
		msgFunc green "Dependencies"
		#create array to hold Dependencies
		local DependenciesArr=("dialog:NOTE non-optional" "expac:NOTE non-optional" "cower:NOTE AUR package" \
"gdrive:NOTE AUR package" "lostfiles:NOTE AUR package" "pacaur:NOTE AUR package" "arch-audit" "rmlint" "rkhunter" \
"gnu-netcat:NOTE No need if using openbsd-netcat" "openbsd-netcat:NOTE No need if using gnu-netcat" \
"clamav" "bleachbit" "ccrypt" "rsync" "lynis" "inxi" "libnotify" "wavemon" "speedtest-cli")
		#loop thru and display the array
		local tLenVar=""
		local packageVar=""
		local noteVar=""
		tLenVar="${#DependenciesArr[@]}" #length of array
		for (( i=0; i<"${tLenVar}"; i++ ));
		do
			#Does the string have a NOTE in it if yes parse note to noteVar?
			if [[ "${DependenciesArr[i]}" == *"NOTE"* ]]; then
				#extract from this string using parameter expansion 
				packageVar=${DependenciesArr[i]%:*} #retain before the colon
				noteVar=${DependenciesArr[i]##*:} #retain after the colon
				checkPacFunc "$packageVar" "$noteVar"
			else
				checkPacFunc "${DependenciesArr[i]}"
			fi
		done
		
		msgFunc green "Do you want to view readme [y/n] ?"
		if msgFunc yesno
			then #yes
				msgFunc line
				msgFunc green "Displaying cylonReadme.md file at $DEST6"
				cd "$DEST6"  || exitHandlerFunc DEST6
				less Readme.md 
				msgFunc green "Done!" 
				msgFunc line
				msgFunc anykey
		fi
		clear
		return
	fi
msgFunc line
msgFunc green "System Information display Page 1"
msgFunc line

msgFunc norm "Uptime = $(uptime -p)"
msgFunc norm "Kernel = $(uname -svr)"
msgFunc norm "Operating System = $(uname -mo)"
msgFunc norm "Network node name = $(uname -n)"
msgFunc norm "User name = $USER"
msgFunc norm "Shell = $SHELL"
if type -p xrandr >/dev/null; then
	msgFunc norm "Screen Resolution = $(xrandr |grep "\*" | cut -c 1-15)"  2>/dev/null
elif type -p xdpyinfo >/dev/null; then
	msgFunc norm "Screen Resolution = $(xdpyinfo | awk -F '[ x]+' '/dimensions:/{print $3}') x $(xdpyinfo | awk -F '[ x]+' '/dimensions:/{print $4}')"
fi
msgFunc norm "CPU = $(grep name /proc/cpuinfo | tail -1| cut -d ":" -f 2)"
local memArr=($(awk -F ':| kB' '/MemTotal|MemAvail/ {printf $2}' /proc/meminfo))
local memusedVar="$((memArr[0] - memArr[1]))"
memusedVar="$((memusedVar / 1024))"
local memtotalVar="$((memArr[0] / 1024))"
local memoryVar="${memusedVar}MB / ${memtotalVar}MB"
msgFunc norm "RAM used/total = ($memoryVar)"
msgFunc norm "Editor variable = $EDITOR"
# Get and display cachedir size read cachedir variable from file
local CacheDirVar=""
source /etc/pacman.conf 2>/dev/null
if [ -z "${CacheDirVar}" ]
then
	#if not set , set to expected default
	CacheDirVar=/var/cache/pacman/pkg/
fi
msgFunc norm "Pacman cache = $CacheDirVar"
msgFunc norm "Space used by pkg downloaded in cache: $(du -sh "$CacheDirVar" 2>/dev/null|awk '{print $1}'
)"
msgFunc norm "Hold packages: $(grep "HoldPkg" /etc/pacman.conf | cut -d "=" -f 2 )"
msgFunc norm "Number of orphans: $(pacman -Qtdq | wc -l)"

#msgFunc norm "Number of configured repositories:  "
msgFunc norm "Packages by repositories:-"
msgFunc norm "Core: $(paclist core | wc -l)"
msgFunc norm "Extra: $(paclist extra | wc -l)"
msgFunc norm "Community: $(paclist community | wc -l)"
msgFunc norm "Multilib: $(paclist multilib | wc -l)"
msgFunc norm "Foreign: $(pacman -Qm | wc -l)"
msgFunc green "Do you want to display System information page 2? [y/n]"
if msgFunc yesno
	then #yes
	clear
	msgFunc green "System information page 2"
	msgFunc norm "Searching / please wait ...."
	msgFunc norm "All .pacnew and .pacsave files: \
	$(find / -regextype posix-extended -regex ".+\.pac(new|save)" 2> /dev/null |wc -l)"
	msgFunc norm "All installed packages: $(pacman -Q | wc -l)" 
	msgFunc norm "All native packages: $(pacman -Qn | wc -l)" 
	msgFunc norm "All explicitly installed packages: $(pacman -Qe | wc -l)" 
	msgFunc norm "All explicitly installed native packages that are"
	msgFunc norm "not direct or optional dependencies: $(pacman -Qqent | wc -l)"
	msgFunc norm "All explicitely installed pkgs not base/base-devel grps: \
	$(comm -23 <(pacman -Qeq | sort) <(pacman -Qgq base base-devel | sort) | wc -l ) "
	msgFunc norm "All foreign installed packages: $(pacman -Qm | wc -l)"
	msgFunc norm "All foreign explicitly installed packages: $(pacman -Qme | wc -l)"
	msgFunc norm "All packages installed as dependencies: $(pacman -Qd | wc -l) "
	msgFunc norm "All modified by user system backup file: $(pacman -Qii | awk '/^MODIFIED/ {print $2}' | wc -l)"
	msgFunc norm "4 Largest packages :"
	expac -H M '%m\t%n' | sort -hr |head -4
	msgFunc norm "4 Newest updated packages :"
	expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort -hr |head -4 
	msgFunc anykey
fi
clear
}

#FUNCTION HEADER
# NAME :           readconfigFunc
# DESCRIPTION:read the config file into program if not there   
#use hardcoded defaults config file is for paths for backup function
#Called when needed by program also can be called by user option or main menu
# passed USERCALL
# INPUTS $1 USERCALL when called by user
# OUTPUTS : sets paths for backup function 
# PROCESS : read $DEST5/cylonCfg.conf
#NOTES :   file is optional       
function readconfigFunc
{
	#check input if called by user from menu or option
	if [ "$1" = "USERCALL" ]
		then
		cd "$DEST5"  || exitHandlerFunc DEST5
		if [ -f "$DEST5/cylonCfg.conf" ] 
			then
				local choiceCCVar
				msgFunc green "Do you want to edit or view? [e/V]"
				read -r choiceCCVar
				if [ "$choiceCCVar" = "e" ]
					then
						$EDITOR "$DEST5/cylonCfg.conf" || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
						clear
						msgFunc green "Exiting config file edit option"
						msgFunc anykey "and exit cylon."
						exit 0
					else
					msgFunc green  "Custom paths read from file"
					cat "$DEST5/cylonCfg.conf" || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
					msgFunc green "Done!"
					msgFunc anykey
					return
				fi
			else
				exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
		fi
	fi
	
	#read cylon.conf for system back up paths 
	msgFunc green "Reading config file cylonCfg.conf at:-"
	msgFunc norm "$DEST5"
	#check if file there if not use defaults.
	if [ ! -f "$DEST5/cylonCfg.conf" ]
		then
		msgFunc red "No config found: Use the default hardcoded paths"
		#path for an internal hard drive backup
		Destination1="/run/media/$USER/Linux_backup/foo"
		#path for an external hard drive backup
		Destination2="/run/media/$USER/iomega_320/foo"
		#default paths for gdrive sync uploads 
		gdriveSource1="$HOME/Documents"
		gdriveDest1="0B3_YYYfoo"
		gdriveSource2="$HOME/Pictures"
		gdriveDest2="0B3_XXXXfoo"
		gdriveSource3="$HOME/Videos"
		gdriveDest3="0B7_XXXXYYYfoo"
		gdriveSource4="$HOME/.config"
		gdriveDest4="0B1_XXXYYYfoo"
		#paths for rsync option
		rsyncsource="$HOME/"
		rsyncDest="/run/media/$USER/Linux_backup/foo"
		#ccyptfile
		myccfile="/foo/foo/XXXX"
		#clamavscan
		clamav_customdir="$HOME/foo/foo"
		msgFunc green "Done!"
		return
	fi
	cd "$DEST5"  || exitHandlerFunc DEST5
	# shellcheck disable=SC1091
	source ./cylonCfg.conf || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
	msgFunc green  "Custom paths read from file"
	cat ./cylonCfg.conf || exitHandlerFunc fileerror "$DEST5/cylonCfg.conf"
	msgFunc green "Done!"
}

#FUNCTION HEADER
# NAME :           checkinputFunc
# DESCRIPTION:CHECK INPUT OPTIONS from linux command line arguments passed to program on call
# INPUTS :  $1 user input option
# see readme and man page for output options
function checkinputFunc
{
case "$1" in
	"");;
	-u|--update) #update system report 
		updateFunc
	;;
	-c|--config)
		readconfigFunc "USERCALL"
		;;
	-d|--default)
#Bleachbit system clean. Use the options set in the GUI
		msgFunc green "Bleachbit system clean"  
		msgFunc norm "Preset options see $HOME/.config/bleachbit/ or GUI "
		msgFunc anykey "To run bleachbit -c --preset"
		msgFunc norm  "Running bleachbit -c --preset"
		bleachbit -c --preset
		msgFunc green "Done!"
		;;
	-v|--version)
		AsciiArtFunc "CYLON"
		msgFunc norm " "
		msgFunc norm "$(pacman -Qs cylon)" 
		;;
	-s|--system)
		HelpFunc SYS
		;;
	-h|--help)
		HelpFunc HELP
		;;
	-b|--bleachbit)
		while true; do
			SystemCleanFunc
		done
	;;
	-m|--maint)
		SystemMaintAutoFunc
	;;
	-p|--print)
		pkglistFunc
	;;
	-r|--rss)
		RssFunc "$1"
	;;
	-z|--delete)
		DelQmFunc
	;;
	-l|--lint)
		RmLintFunc
	;;
	-n| --notify)
		notifyFunc
	;;
	*)	clear
		exitHandlerFunc Badinput "$1"
	;;
esac
#was there a input if yes quit?
if [ -n "$1" ] 
	then
		exit 0 
fi
clear
}

#FUNCTION HEADER
# NAME : makeDirFunc
# DESCRIPTION :  makes a directory with time/date stamp and enters it
#Directory used for program output and backups. 
# INPUTS : $1 text is appended to name  $2 bit flag  to change dir or not
function makeDirFunc
{
	local dirVar=""
	#makes dirs for output appends passed text to name
	#check if coming from system backup other path 1 yes 0 no.
	if [ "$2" != 1 ]
		then 
		cd "$DEST3" || exitHandlerFunc DEST3
	fi
	dirVar=$(date +%H%M-%d%b%y)"$1"
	mkdir "$dirVar"
	cd "$dirVar" || exitHandlerFunc DEST4
	msgFunc norm "Directory for output made at:-"
	pwd	 
}

#FUNCTION HEADER
# NAME :  WeatherFunc
# DESCRIPTION:3 day weather forecast
function WeatherFunc
{
	msgFunc norm "3 day weather forecast by WTTR.IN"
	msgFunc norm "Type a City name, airport code, domain name or area code:-"
	local mycityVar=""
	read -r mycityVar		
	clear
	curl wttr.in/"$mycityVar"
	msgFunc anykey 
	clear
}

#FUNCTION HEADER
# NAME :  AsciiArtFunc
# DESCRIPTION:display asciiArt
# INPUTS : $1 text to pick art
function AsciiArtFunc
{
if [ "$1" = "ARCH" ]
then
	msgFunc blue "                           _         _        _                         "
	msgFunc blue "     /\                   | |       | |      (_)                        "
	msgFunc blue "    /  \     _ __    ___  | |__     | |       _   _ __    _   _  __  __ "
	msgFunc blue "   / /\ \   | '__|  / __| | '_ \    | |      | | | '_ \  | | | | \ \/ / "
	msgFunc blue "  / ____ \  | |    | (__  | | | |   | |____  | | | | | | | |_| |  >  <  "
	msgFunc blue " /_/    \_\ |_|     \___| |_| |_|   |______| |_| |_| |_|  \__,_| /_/\_\ "
elif [ "$1" = "CYLON" ]
then
		msgFunc blue "_______ __   __         _____  __   _"
		msgFunc blue "|         \_/   |      |     | | \  |"
		msgFunc blue "|_____     |    |_____ |_____| |  \_|"
fi
}
