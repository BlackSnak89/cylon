#FUNCTION HEADER
# NAME :            ccryptFunc
# DESCRIPTION :      function to use ccrpyt encrypt and decrypt files
# PROCESS :[1]   Encrypt. a file [2] decrypt  
# [3]   view a encrypted file                 
# [4]   view a decrypted file [5]  keychange
#NOTES :   needs ccrypt  installed 
function ccryptFunc
{
	clear
	myccfile=""
	msgFunc blue "ccrypt - encrypt and decrypt files:-"
	#check if ccrypt installed
    if ! msgFunc checkpac ccrypt
	then
		msgFunc anykey 
	return
	fi
	msgFunc green "Do you want to use the path(myccfile) defined in Config file  [y/N]"
	read -r choiceccy
	if [ "$choiceccy" = "y" ]
	then
	#path from file
	readconfigFunc
	msgFunc anykey
	clear
	else
			#prompt for manual file path
			#msgFunc norm "Type a path to the folder you want to work with:-"
			#read -r myccfile
			myccfile=$(dialog --title "Ccrypt" --output-fd 1 --begin 1 1 --cancel-label "Exit" --title  "Select Directory path:" --dselect / 10 40)
				case $? in
				0)
					clear
				;;
				1)
					msgFunc yellow "Exit pressed."
					return
				;;
				255)
					msgFunc red "Box closed."
					return
				;;
			esac
			cd "$myccfile" || exitHandlerFunc dest4
			msgFunc blue "Contents of $myccfile "
			ls -la
			msgFunc blue "Type the file name  you want to work with:-"
			read -r myccfile
	fi
	if [ -f "$myccfile"  ] 
	 then 
		msgFunc norm "$myccfile Found file!" 
	 else
		msgFunc red "$myccfile File out found!"
		exitHandlerFunc exitout
	 fi
	 msgFunc blue "ccrypt - encrypt and decrypt files Menu options:-"
	optionscc=("Encrypt a file " "Decrypt a file" "View encrypted file" \
"Edit decrypted file with NANO" "Change the key of encrypted file" "Return")
			select choicecc in "${optionscc[@]}"
			do
			case "$choicecc" in 
			 "${optionscc[0]}") #Encrypt.
			   msgFunc green "Decrypt  a files to standard output., ccrypt -e"
				ccrypt -e "$myccfile"
			 ;;
			 "${optionscc[1]}") #Decrypt
			 msgFunc green "Decrypt  a files to standard output., ccrypt -d"
			   ccrypt -d "$myccfile"
			 ;;
			 "${optionscc[2]}") #Decrypt  files to standard output.
				msgFunc green "Decrypt  file to standard output., ccrypt -c"
				 ccrypt -c "$myccfile"
			 ;;
			 "${optionscc[3]}") #Edit a Decrypted file
			    msgFunc green "Edit a Decrypted file with nano text editor, nano"
				nano "$myccfile"
			 ;;
			 "${optionscc[4]}") #Change the key of encrypted data
				msgFunc green "Change the key of encrypted file, ccrypt -x"
				ccrypt -x "$myccfile"
			 ;;
			 *)  #exit  
				     msgFunc green "Done!"	
				     msgFunc anykey
				     clear
					return
					;;
			esac
			break
			done
			msgFunc green "Done!"
}
