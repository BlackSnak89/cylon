#!/bin/bash
#Module containing functions called from cylon package
#Functions : SystemSecFunc , AntiMalwareFunc intchkFunc

#FUNCTION HEADER
# NAME :  SystemSecFunc
# DESCRIPTION: display security menu called from main menu
function SystemSecFunc
{
	clear
	local choiceSecVar=""
	local mylengthVar=""
	
	while true; do
	msgFunc blue "System Security Menu options:-"
	local optionsSecArr=("$(checkPacFunc ccrypt NOMES)" "$(checkPacFunc clamav NOMES)" "$(checkPacFunc rkhunter NOMES)" 
	"$(checkPacFunc lynis NOMES)" "Password generator" "List the password aging info of a user" "Audit SUID/SGID Files" "Return")
			select choiceSecVar in "${optionsSecArr[@]}"
			do
			case "$choiceSecVar" in 
			 "${optionsSecArr[0]}") # ccrypt - encrypt and decrypt files 
				ccryptFunc
			 ;;
			 "${optionsSecArr[1]}") #Anti-virus clamav
				AntiMalwareFunc "CLAMAV"
			 ;;
			 "${optionsSecArr[2]}") #rootkit hunter 
				AntiMalwareFunc "RKHUNTER"
			 ;;
			 "${optionsSecArr[3]}") # Lynis - System and security auditing tool
				AntiMalwareFunc "LYNIS"
			 ;;
			 "${optionsSecArr[4]}") #Password generator
				#password section
				makeDirFunc "-SYSSECURITY"
				msgFunc green "Random Password generator"
				msgFunc norm "Enter length:-"
				read -r mylengthVar
				#if enter pressed set default 20
				if [ -z "$mylengthVar" ]; then
					mylengthVar=20
				fi
				#check integer
				intchkFunc "$mylengthVar"
				echo -n "$(< /dev/urandom tr -dc "_*?#!A-Z-a-z-0-9" | head -c"${1:-$mylengthVar}";)">pg
				msgFunc green "Password generated"
				msgFunc green "Done!"
			;;
			
			"${optionsSecArr[5]}") # chage cmd list the passwd aging info
				local usrVar=""
				msgFunc green "chage command to list the password aging information of a user."
				msgFunc norm "Please enter user name"
				read -r usrVar
				sudo chage -l "$usrVar"
				msgFunc green "Done!"
				msgFunc anykey
			;;
			"${optionsSecArr[6]}") #Auditing SUID/SGID Files
				makeDirFunc "-SYSSECURITY"
				cat <<-EOF
				Since SUID/SGID files potentially make a system vulnerable, 
				the system administrator needs to keep track of these files
				SUID (Set owner User ID up on execution) = listSUID
				SGID (Set Group ID up on execution) = listSGID
				Sticky bit Set = listSBit
				EOF
				msgFunc green "Conducting Auditing outputting results to files"
				find / -perm -4000 -ls 2>/dev/null > listSUID
				find / -perm -2000 -ls 2>/dev/null >listSGID
				find / -perm -1000 -ls 2</dev/null > listSBit
				msgFunc green "Done!"
				msgFunc anykey
			;;
			

			 *)  #exit  
				clear
				return
			;;
			esac
			break
			done
done
}

#FUNCTION HEADER# NAME :  AntiMalwareFunc 
# DESCRIPTION: Function for ROOTKIT HUNTER software
#anti virus with clamscan and lynis security audit
# INPUTS:  $1  CLAMAV or RKHUNTER or LYNIS
#NOTES :    needs clamav,lynis and rkhunter installed  
function AntiMalwareFunc
{
#clamav section
	if [ "$1" = "CLAMAV" ]
			then
			#check clamav is installed
			if ! checkPacFunc clamav
				then
				msgFunc anykey 
				return
			fi
			clear
			local optionsAVArr=("Update clamavscan Database" "Get the Anti-Malware Testfile " \
			"Scan the Anti-Malware Testfile " "Scan $HOME" "Scan /" \
			"Scan $HOME with remove the infected file option ON" \
			"Scan / with remove the infected file option ON" "Scan Custom folder from config file, remove option ON" "Return")
			local choiceAVVar=""
			msgFunc blue "clamavscan options"
			select  choiceAVVar in "${optionsAVArr[@]}"
			do
			case "$choiceAVVar" in
			
			"${optionsAVArr[0]}") # update clamscan virus definitions:
				msgFunc green "Updating clamavscan Databases"
				sudo freshclam
			;;
			"${optionsAVArr[1]}") #Get the Anti-Malware Testfile 
				cd "$DEST5" || exitHandlerFunc DEST5
				msgFunc green "Fetching eigar.com.txt malware testfile from internet"
				curl -O http://www.eicar.org/download/eicar.com.txt 
				msgFunc norm " "
				cd ~ || exitHandlerFunc DEST4
			;;
			"${optionsAVArr[2]}") #Scan the Anti-Malware Testfile 
				cd "$DEST5" || exitHandlerFunc DEST5
				clamscan -v eicar.com.txt
				msgFunc norm " "
				cd ~ || exitHandlerFunc DEST4
			;;
			"${optionsAVArr[3]}")#scan home 
				msgFunc green "Scanning with Clamav"
				makeDirFunc "-CLAMAVINFO"
				clamscan -l clamavLogFile -v --recursive --infected "$HOME"
			;;
			"${optionsAVArr[4]}") #scan entire system
				msgFunc green "Scanning with Clamav"
				makeDirFunc "-CLAMAVINFO"
				sudo clamscan -l clamavLogFile -v --recursive --infected --exclude-dir='^/sys|^/proc|^/dev|^/lib|^/bin|^/sbin' /
			;;
			"${optionsAVArr[5]}") #scan home with delete
				msgFunc green "Scanning with Clamav"
				makeDirFunc "-CLAMAVINFO"
				clamscan -l clamavLogFile -v --recursive --infected --remove=yes "$HOME"
			;;
			"${optionsAVArr[6]}") #scan entire system with delete
				msgFunc green "Scanning with Clamav"
				makeDirFunc "-CLAMAVINFO"
				sudo clamscan -l clamavLogFile -v --recursive --infected --remove=yes --exclude-dir='^/sys|^/proc|^/dev|^/lib|^/bin|^/sbin' /
			;;
			"${optionsAVArr[7]}")#scan custom
				msgFunc green "Scanning with Clamav$"
				readconfigFunc
				makeDirFunc "-CLAMAVINFO"
				msgFunc norm " "
				if [ ! -d "$clamav_customdir" ]; then
					# Control will enter here if dir doesn't exist.
					msgFunc red "$clamav_customdir"
					exitHandlerFunc DEST4
				fi
				clamscan -l clamavLogFile -v --recursive --infected --remove=yes "$clamav_customdir"
			;;
			*) #exit
			clear
			return 
			;;
			esac
			break
			done
			msgFunc green "Done!"
			msgFunc anykey
			return
	fi
			
#Rootkitsection
	if [ "$1" = "RKHUNTER" ]
	then
		#check rkhunter is installed
		
		if ! checkPacFunc rkhunter
		then
			msgFunc anykey 
		return
		fi
		msgFunc green "Checking rkhunter data files"
		sudo rkhunter --update
		msgFunc green "Done!"
		msgFunc green "Fill the file properties database"
		sudo rkhunter --propupd
		msgFunc green "Done!"
		msgFunc green "Running Rootkit hunter"
		sudo rkhunter --check
		msgFunc green "Done!"
		msgFunc anykey
		return
	fi
	
#lynis section
	if [ "$1" = "LYNIS" ]
	then
		#check lynis is installed
		if ! checkPacFunc lynis
		then
			msgFunc anykey 
		return
		fi
		msgFunc green "Lynis - System and security auditing tool"
		 sudo  lynis audit system
		 msgFunc norm "Entire logfile at /var/log/lynis.log"
		 msgFunc norm  "Summary of logfile at:-"
		 makeDirFunc "-LYNISINFO"
		 {
		 echo "Warnings" 
		 sudo grep Warning /var/log/lynis.log 
		 echo "Suggestions" 
		 sudo grep Suggestion /var/log/lynis.log  
		 } >> lynisinfo
		msgFunc anykey
		msgFunc green "Done!"
	fi

}


#FUNCTION HEADER
# NAME :  intchkFunc
# DESCRIPTION: checks string if input integer 
#inputs integer $1
#outputs returns 0 if integer 1 if not calls errorhandler 
#called from rssFunc NetworkFunc and Password generator
function  intchkFunc
{
#source :http://mywiki.wooledge.org/BashFAQ/054
if [[ "$1" != *[!0-9]* ]]; 
then
	#integer
	return 0
else
	#not an integer
	exitHandlerFunc nonint
fi
}
